package com.example.sameer.samplebluetoothserver;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Environment;
import android.util.Log;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created by Sameer on 4/1/2015.
 */
public class BluetoothServer implements Runnable
{

    PrintWriter output;
    BufferedReader input;
    static BluetoothSocket socket;
    boolean loop= true;
    String in;
    public byte[] image;
    BlockingQueue<byte[]> queue;
    Monitor monitor;
    public BluetoothServer(BluetoothSocket socket,BlockingQueue<byte[]> queue, Monitor monitor){

       this.socket = socket;
       this.queue = queue;
       this.monitor = monitor;
    }

    public void run()
    {
        try{

            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            DataInputStream in = new DataInputStream(socket.getInputStream());
            while(true) {

                String inp = input.readLine();

          //      Log.e("input",in);
            //   System.out.println("h");
                image = new byte[10241];
                Log.e("sentinel",inp);


                    monitor.setFlag(false);

                    monitor.block.signal();
                    queue.add(image);

               /* File imageFile = new File(Environment.getDataDirectory().toString());

                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(imageFile));
                bos.write(image);
                bos.flush();
                bos.close();*/
            //    socket.close();
           //     break;
            }

        }catch(IOException ex){}
    }


}
class AcceptThread implements Runnable {
    private final BluetoothServerSocket mmServerSocket;
    public BluetoothSocket socket;
    public volatile boolean serverWait=true;
    byte[] image;
    Condition serverAvailable;
    Lock lock;
    BlockingQueue<byte[]> queue;
    Monitor monitor;
    public AcceptThread(BluetoothAdapter mBluetoothAdapter,String id,Monitor monitor) {
        // Use a temporary object that is later assigned to mmServerSocket,
        // because mmServerSocket is final
        BluetoothServerSocket tmp = null;
        try {
            // MY_UUID is the app's UUID string, also used by the client code
            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord("Blue", UUID.fromString(id));
            lock = new ReentrantLock();
            serverAvailable = lock.newCondition();
        } catch (IOException e) { }
        mmServerSocket = tmp;
        this.monitor = monitor;
    }

    public void run() {
        socket = null;
        // Keep listening until exception occurs or a socket is returned

        while (true) {
            try {

                socket = mmServerSocket.accept();

                setSocket(socket);
                System.out.println("l");
                // If a connection was accepted
                if (socket != null) {
                    // Do work to manage the connection (in a separate thread)
                    //     System.out.println("l");
                /*    try{
                     lock.lock();

                    while (serverWait) {
                        serverAvailable.await();

                    }

                        System.out.println("g");
                        mmServerSocket.close();
                        serverAvailable.signal();
                        break;
                }catch(InterruptedException ex){}
                    finally{
                        lock.unlock();
                    }
                    try {
                        Thread.sleep(1000);
                    }catch(InterruptedException ex){}*/

                    BluetoothServer server = new BluetoothServer(socket,queue, monitor);
                    Thread btServer = new Thread(server);
                    btServer.start();
                    mmServerSocket.close();

                    try {

                        monitor.lockQueue();
                        image = queue.take();
                        System.out.println(image.length);
                    }catch(InterruptedException ex){}
                    break;
                }
            }catch(IOException e){
                System.out.println("l");
                break;
            }
        }
    }

    /** Will cancel the listening socket, and cause the thread to finish */
    public void cancel() {
        try {
            mmServerSocket.close();
        } catch (IOException e) { }
    }
    public BluetoothSocket getSocket(){
        return socket;
    }
    public void setSocket(BluetoothSocket socket){
        this.socket = socket;
    }
    public void setCondition(boolean condition){
        serverWait = condition;
    }
    public byte[] getImage(){
        return image;
    }
}
class Monitor{
    Lock lock = new ReentrantLock();
    Condition block = lock.newCondition();
    BlockingQueue queue;
    boolean flag = true;
    public Monitor(){

    }
    public void lockQueue()
    {
        try {
            lock.lock();
            while(flag){
               block.await();
            }

        }catch(InterruptedException ex){}
        finally{
            lock.unlock();
        }
    }
    public void setFlag(boolean newFlag){
        flag = newFlag;
    }
}
